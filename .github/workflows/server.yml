on:
  push:
    branches: [master]

name: SERVER

defaults:
  run:
    working-directory: server

jobs:
  build:
    name: Build, Tests and Deploy
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Install dependencies
      run: npm install

    - name: Run lint
      run: npm run lint

    - name: Run tests
      run: ENV_SILENT=true npm run test

    # - name: Build for production
    #   run: npm run build --production

    # - name: Configure AWS credentials
    #   uses: aws-actions/configure-aws-credentials@v1
    #   with:
    #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #     aws-region: ${{ secrets.AWS_REGION }}

    # - name: Login to Amazon ECR
    #   id: login-ecr
    #   uses: aws-actions/amazon-ecr-login@v1

    # - name: Build, tag, and push image to Amazon ECR
    #   id: build-image
    #   env:
    #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
    #     ECR_REPOSITORY: rankeer.backend
    #     IMAGE_TAG: ${{ github.sha }}
    #   run: |
    #     docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
    #     docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
    #     echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    # - name: Connect in EC2 and alter docker image
    #   uses: JimCronqvist/action-ssh@master
    #   with:
    #     hosts: ${{ secrets.SSH_HOST }}
    #     privateKey: ${{ secrets.SSH_PRIVATE_KEY }}
    #     command: |
    #       aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ECR_LOGIN }}
    #       docker stop rankeer.backend
    #       docker rm rankeer.backend
    #       docker run -d -p 80:3333 --name rankeer.backend --env-file=./variables/rankeer.env ${{ steps.build-image.outputs.image }}
